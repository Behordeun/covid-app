{
  "version": 1,
  "tags": [
    {
      "name": "mb-buttons",
      "description": "An array of buttons to choose from. Expects nested mb-options to actually render buttons.\n\nEvents:\n\n  * `mb-input` {} - Dispatched when the input changes\n\n  * `mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source\n\n  * `mb-connect` {} - Dispatched when the component connects\n\n  * `mb-disconnect` {} - Dispatched when the component disconnects\n\nAttributes:\n\n  * `terminology` {`string`} - Terminology of preference. Eg: SNOMED-CT, LOINC, local (for openEHR)\n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string | undefined`} - Optional label for the element\n\n  * `data` {`CodedText | undefined`} - Data of CodedText\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperties:\n\n  * `_options` {`MbOption[]`} - \n\n  * `_optionElements` {`NodeListOf<MbOption>`} - \n\n  * `terminology` {`string`} - Terminology of preference. Eg: SNOMED-CT, LOINC, local (for openEHR)\n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string | undefined`} - Optional label for the element\n\n  * `data` {`CodedText | undefined`} - Data of CodedText\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\n  * `_mbInput` - Event Emitter for mb-input\n\n  * `_mbDependency` - \n\n  * `_mbConnect` - \n\n  * `_mbDisconnect` - ",
      "attributes": [
        {
          "name": "terminology",
          "description": "`terminology` {`string`} - Terminology of preference. Eg: SNOMED-CT, LOINC, local (for openEHR)\n\nProperty: terminology\n\nDefault: local"
        },
        {
          "name": "path",
          "description": "`path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\nProperty: path"
        },
        {
          "name": "label",
          "description": "`label` {`string | undefined`} - Optional label for the element\n\nProperty: label",
          "values": []
        },
        {
          "name": "data",
          "description": "`data` {`CodedText | undefined`} - Data of CodedText\n\nProperty: data",
          "values": []
        },
        {
          "name": "type",
          "description": "`type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperty: type",
          "values": []
        },
        {
          "name": "onmb-input",
          "description": "`mb-input` {} - Dispatched when the input changes"
        },
        {
          "name": "onmb-dependency",
          "description": "`mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source"
        },
        {
          "name": "onmb-connect",
          "description": "`mb-connect` {} - Dispatched when the component connects"
        },
        {
          "name": "onmb-disconnect",
          "description": "`mb-disconnect` {} - Dispatched when the component disconnects"
        }
      ]
    },
    {
      "name": "mb-dropdown",
      "description": "Properties:\n\n  * `styles` - \n\n  * `trigger` {`HTMLElement`} - \n\n  * `panel` {`HTMLElement`} - \n\n  * `positioner` {`HTMLElement`} - \n\n  * `componentId` - \n\n  * `isVisible` - \n\n  * `popover` - \n\n  * `open` {`boolean`} - \n\n  * `placement` {`\"top\" | \"top-start\" | \"top-end\" | \"bottom\" | \"bottom-start\" | \"bottom-end\" | \"right\" | \"right-start\" | \"right-end\" | \"left\" | \"left-start\" | \"left-end\"`} - \n\n  * `closeOnSelect` {`boolean`} - \n\n  * `containingElement` {`HTMLElement`} - \n\n  * `distance` {`number`} - \n\n  * `skidding` {`number`} - \n\n  * `hoist` {`boolean`} - \n\n  * `slShow` - \n\n  * `slAfterShow` - \n\n  * `slHide` - \n\n  * `slAfterHide` - ",
      "attributes": []
    },
    {
      "name": "mb-filter",
      "description": "Attributes:\n\n  * `label` {`string`} - \n\n  * `value` {`string`} - \n\n  * `disabled` {`boolean`} - \n\nProperties:\n\n  * `label` {`string`} - \n\n  * `value` {`string`} - \n\n  * `disabled` {`boolean`} - ",
      "attributes": [
        {
          "name": "label",
          "description": "`label` {`string`} - \n\nProperty: label"
        },
        {
          "name": "value",
          "description": "`value` {`string`} - \n\nProperty: value"
        },
        {
          "name": "disabled",
          "description": "`disabled` {`boolean`} - \n\nProperty: disabled\n\nDefault: false",
          "valueSet": "v"
        }
      ]
    },
    {
      "name": "mb-option",
      "description": "Attributes:\n\n  * `value` {`string`} - \n\n  * `label` {`string`} - \n\nProperties:\n\n  * `value` {`string`} - \n\n  * `label` {`string`} - ",
      "attributes": [
        {
          "name": "value",
          "description": "`value` {`string`} - \n\nProperty: value"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - \n\nProperty: label"
        }
      ]
    },
    {
      "name": "mb-search",
      "description": "Events:\n\n  * `mb-input` {} - Dispatched when the input changes\n\n  * `mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source\n\n  * `mb-connect` {} - Dispatched when the component connects\n\n  * `mb-disconnect` {} - Dispatched when the component disconnects\n\nAttributes:\n\n  * `searchTerm` {`string`} - \n\n  * `_filters` {`MbFilter[]`} - \n\n  * `_cancelledFilters` {`string[]`} - \n\n  * `mock` {`string[]`} - \n\n  * `axios` {`AxiosInstance`} - \n\n  * `debounceInterval` {`number`} - \n\n  * `hits` {`number`} - \n\n  * `terminology` {`string`} - Terminology of preference. Eg: SNOMED-CT, LOINC, local (for openEHR)\n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string | undefined`} - Optional label for the element\n\n  * `data` {`CodedText | undefined`} - Data of CodedText\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperties:\n\n  * `searchTerm` {`string`} - \n\n  * `_filters` {`MbFilter[]`} - \n\n  * `_cancelledFilters` {`string[]`} - \n\n  * `mock` {`string[]`} - \n\n  * `axios` {`AxiosInstance`} - \n\n  * `debounceInterval` {`number`} - \n\n  * `hits` {`number`} - \n\n  * `_moreHits` {`number`} - \n\n  * `_debouncing` {`boolean`} - \n\n  * `_debounceTimeout` {`number`} - \n\n  * `_maxHits` {`number`} - \n\n  * `_contraints` {`string | null`} - \n\n  * `_viewMore` - \n\n  * `_parentAxios` {`AxiosInstance`} - \n\n  * `_loadingResults` - \n\n  * `_hasValue` {`boolean`} - \n\n  * `_display` {`string | undefined`} - \n\n  * `_code` {`string | undefined`} - \n\n  * `terminology` {`string`} - Terminology of preference. Eg: SNOMED-CT, LOINC, local (for openEHR)\n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string | undefined`} - Optional label for the element\n\n  * `data` {`CodedText | undefined`} - Data of CodedText\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\n  * `_mbInput` - Event Emitter for mb-input\n\n  * `_mbDependency` - \n\n  * `_mbConnect` - \n\n  * `_mbDisconnect` - ",
      "attributes": [
        {
          "name": "searchTerm",
          "description": "`searchTerm` {`string`} - \n\nProperty: searchTerm"
        },
        {
          "name": "_filters",
          "description": "`_filters` {`MbFilter[]`} - \n\nProperty: _filters"
        },
        {
          "name": "_cancelledFilters",
          "description": "`_cancelledFilters` {`string[]`} - \n\nProperty: _cancelledFilters\n\nDefault: "
        },
        {
          "name": "mock",
          "description": "`mock` {`string[]`} - \n\nProperty: mock\n\nDefault: "
        },
        {
          "name": "axios",
          "description": "`axios` {`AxiosInstance`} - \n\nProperty: axios"
        },
        {
          "name": "debounceInterval",
          "description": "`debounceInterval` {`number`} - \n\nProperty: debounceInterval\n\nDefault: 150"
        },
        {
          "name": "hits",
          "description": "`hits` {`number`} - \n\nProperty: hits\n\nDefault: 10"
        },
        {
          "name": "terminology",
          "description": "`terminology` {`string`} - Terminology of preference. Eg: SNOMED-CT, LOINC, local (for openEHR)\n\nProperty: terminology\n\nDefault: local"
        },
        {
          "name": "path",
          "description": "`path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\nProperty: path"
        },
        {
          "name": "label",
          "description": "`label` {`string | undefined`} - Optional label for the element\n\nProperty: label",
          "values": []
        },
        {
          "name": "data",
          "description": "`data` {`CodedText | undefined`} - Data of CodedText\n\nProperty: data",
          "values": []
        },
        {
          "name": "type",
          "description": "`type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperty: type",
          "values": []
        },
        {
          "name": "onmb-input",
          "description": "`mb-input` {} - Dispatched when the input changes"
        },
        {
          "name": "onmb-dependency",
          "description": "`mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source"
        },
        {
          "name": "onmb-connect",
          "description": "`mb-connect` {} - Dispatched when the component connects"
        },
        {
          "name": "onmb-disconnect",
          "description": "`mb-disconnect` {} - Dispatched when the component disconnects"
        }
      ]
    },
    {
      "name": "mb-select",
      "description": "Events:\n\n  * `mb-input` {} - Dispatched when the input changes\n\n  * `mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source\n\n  * `mb-connect` {} - Dispatched when the component connects\n\n  * `mb-disconnect` {} - Dispatched when the component disconnects\n\nAttributes:\n\n  * `placeholder` {`string`} - \n\n  * `terminology` {`string`} - Terminology of preference. Eg: SNOMED-CT, LOINC, local (for openEHR)\n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string | undefined`} - Optional label for the element\n\n  * `data` {`CodedText | undefined`} - Data of CodedText\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperties:\n\n  * `placeholder` {`string`} - \n\n  * `_options` {`MbOption[]`} - \n\n  * `_optionElements` {`NodeListOf<MbOption>`} - \n\n  * `terminology` {`string`} - Terminology of preference. Eg: SNOMED-CT, LOINC, local (for openEHR)\n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string | undefined`} - Optional label for the element\n\n  * `data` {`CodedText | undefined`} - Data of CodedText\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\n  * `_mbInput` - Event Emitter for mb-input\n\n  * `_mbDependency` - \n\n  * `_mbConnect` - \n\n  * `_mbDisconnect` - ",
      "attributes": [
        {
          "name": "placeholder",
          "description": "`placeholder` {`string`} - \n\nProperty: placeholder"
        },
        {
          "name": "terminology",
          "description": "`terminology` {`string`} - Terminology of preference. Eg: SNOMED-CT, LOINC, local (for openEHR)\n\nProperty: terminology\n\nDefault: local"
        },
        {
          "name": "path",
          "description": "`path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\nProperty: path"
        },
        {
          "name": "label",
          "description": "`label` {`string | undefined`} - Optional label for the element\n\nProperty: label",
          "values": []
        },
        {
          "name": "data",
          "description": "`data` {`CodedText | undefined`} - Data of CodedText\n\nProperty: data",
          "values": []
        },
        {
          "name": "type",
          "description": "`type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperty: type",
          "values": []
        },
        {
          "name": "onmb-input",
          "description": "`mb-input` {} - Dispatched when the input changes"
        },
        {
          "name": "onmb-dependency",
          "description": "`mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source"
        },
        {
          "name": "onmb-connect",
          "description": "`mb-connect` {} - Dispatched when the component connects"
        },
        {
          "name": "onmb-disconnect",
          "description": "`mb-disconnect` {} - Dispatched when the component disconnects"
        }
      ]
    },
    {
      "name": "mb-context",
      "description": "Events:\n\n  * `mb-input` {} - Dispatched when the input changes\n\n  * `mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source\n\n  * `mb-connect` {} - Dispatched when the component connects\n\n  * `mb-disconnect` {} - Dispatched when the component disconnects\n\nAttributes:\n\n  * `autocontext` {`boolean`} - \n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string | undefined`} - Optional label for the element\n\n  * `data` - Data of the element. Setting this will emit an input event automatically.\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperties:\n\n  * `autocontext` {`boolean`} - \n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string | undefined`} - Optional label for the element\n\n  * `data` - Data of the element. Setting this will emit an input event automatically.\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\n  * `_mbInput` - Event Emitter for mb-input\n\n  * `_mbDependency` - \n\n  * `_mbConnect` - \n\n  * `_mbDisconnect` - ",
      "attributes": [
        {
          "name": "autocontext",
          "description": "`autocontext` {`boolean`} - \n\nProperty: autocontext\n\nDefault: true",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "`path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\nProperty: path"
        },
        {
          "name": "label",
          "description": "`label` {`string | undefined`} - Optional label for the element\n\nProperty: label",
          "values": []
        },
        {
          "name": "data",
          "description": "`data` - Data of the element. Setting this will emit an input event automatically.\n\nProperty: data"
        },
        {
          "name": "type",
          "description": "`type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperty: type",
          "values": []
        },
        {
          "name": "onmb-input",
          "description": "`mb-input` {} - Dispatched when the input changes"
        },
        {
          "name": "onmb-dependency",
          "description": "`mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source"
        },
        {
          "name": "onmb-connect",
          "description": "`mb-connect` {} - Dispatched when the component connects"
        },
        {
          "name": "onmb-disconnect",
          "description": "`mb-disconnect` {} - Dispatched when the component disconnects"
        }
      ]
    },
    {
      "name": "mb-date",
      "description": "Events:\n\n  * `mb-input` {} - Dispatched when the input changes\n\n  * `mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source\n\n  * `mb-connect` {} - Dispatched when the component connects\n\n  * `mb-disconnect` {} - Dispatched when the component disconnects\n\nAttributes:\n\n  * `time` {`boolean`} - \n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string`} - Optional label for the element\n\n  * `data` {`string`} - Data of the element. Setting this will emit an input event automatically.\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperties:\n\n  * `time` {`boolean`} - \n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string`} - Optional label for the element\n\n  * `data` {`string`} - Data of the element. Setting this will emit an input event automatically.\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\n  * `_mbInput` - Event Emitter for mb-input\n\n  * `_mbDependency` - \n\n  * `_mbConnect` - \n\n  * `_mbDisconnect` - ",
      "attributes": [
        {
          "name": "time",
          "description": "`time` {`boolean`} - \n\nProperty: time\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "`path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\nProperty: path"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Optional label for the element\n\nProperty: label\n\nDefault: "
        },
        {
          "name": "data",
          "description": "`data` {`string`} - Data of the element. Setting this will emit an input event automatically.\n\nProperty: data"
        },
        {
          "name": "type",
          "description": "`type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperty: type",
          "values": []
        },
        {
          "name": "onmb-input",
          "description": "`mb-input` {} - Dispatched when the input changes"
        },
        {
          "name": "onmb-dependency",
          "description": "`mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source"
        },
        {
          "name": "onmb-connect",
          "description": "`mb-connect` {} - Dispatched when the component connects"
        },
        {
          "name": "onmb-disconnect",
          "description": "`mb-disconnect` {} - Dispatched when the component disconnects"
        }
      ]
    },
    {
      "name": "mb-fhir-form",
      "description": "Events:\n\n  * `mb-input` {} - When contents of the form change. The result must be obtained using `e=>e.target.data`.\n\n  * `mb-load` {} - Triggered when the form first loads.\n\n  * `mb-submit` {} - Triggered with all the serialized data in the detail of the Event.\n\nAttributes:\n\n  * `ctx` - Context object that is set before submitting form. Automatic inferences are made where possible.\n\n  * `overwritectx` {`boolean`} - Context will not be automatically inferd. What you pass in will be directly reflected.\n\n  * `plugin` {`MbPlugin`} - Plugin to handle serialization and parsing of the input. openEHR and FHIR Plugins are built-in.\n\n  * `hermes` {`AxiosInstance`} - Hermes instance to communicate with for SNOMED CT search elements.\n\nProperties:\n\n  * `ctx` - Context object that is set before submitting form. Automatic inferences are made where possible.\n\n  * `overwritectx` {`boolean`} - Context will not be automatically inferd. What you pass in will be directly reflected.\n\n  * `input` - \n\n  * `load` - \n\n  * `plugin` {`MbPlugin`} - Plugin to handle serialization and parsing of the input. openEHR and FHIR Plugins are built-in.\n\n  * `hermes` {`AxiosInstance`} - Hermes instance to communicate with for SNOMED CT search elements.\n\n  * `mbElements` - The child elements are loaded\n\n  * `export` - \n\n  * `submit` - \n\n  * `submitButton` - \n\n  * `data` {`Data`} - ",
      "attributes": [
        {
          "name": "ctx",
          "description": "`ctx` - Context object that is set before submitting form. Automatic inferences are made where possible.\n\nProperty: ctx"
        },
        {
          "name": "overwritectx",
          "description": "`overwritectx` {`boolean`} - Context will not be automatically inferd. What you pass in will be directly reflected.\n\nProperty: overwritectx\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "plugin",
          "description": "`plugin` {`MbPlugin`} - Plugin to handle serialization and parsing of the input. openEHR and FHIR Plugins are built-in.\n\nProperty: plugin\n\nDefault: [object Object]"
        },
        {
          "name": "hermes",
          "description": "`hermes` {`AxiosInstance`} - Hermes instance to communicate with for SNOMED CT search elements.\n\nProperty: hermes"
        },
        {
          "name": "onmb-input",
          "description": "`mb-input` {} - When contents of the form change. The result must be obtained using `e=>e.target.data`."
        },
        {
          "name": "onmb-load",
          "description": "`mb-load` {} - Triggered when the form first loads."
        },
        {
          "name": "onmb-submit",
          "description": "`mb-submit` {} - Triggered with all the serialized data in the detail of the Event."
        }
      ]
    },
    {
      "name": "mb-form",
      "description": "Reactive form that responds to changes in custom elements nested inside.\n\nEvents:\n\n  * `mb-input` {} - When contents of the form change. The result must be obtained using `e=>e.target.data`.\n\n  * `mb-load` {} - Triggered when the form first loads.\n\n  * `mb-submit` {} - Triggered with all the serialized data in the detail of the Event.\n\nAttributes:\n\n  * `ctx` - Context object that is set before submitting form. Automatic inferences are made where possible.\n\n  * `overwritectx` {`boolean`} - Context will not be automatically inferd. What you pass in will be directly reflected.\n\n  * `plugin` {`MbPlugin`} - Plugin to handle serialization and parsing of the input. openEHR and FHIR Plugins are built-in.\n\n  * `hermes` {`AxiosInstance`} - Hermes instance to communicate with for SNOMED CT search elements.\n\nProperties:\n\n  * `ctx` - Context object that is set before submitting form. Automatic inferences are made where possible.\n\n  * `overwritectx` {`boolean`} - Context will not be automatically inferd. What you pass in will be directly reflected.\n\n  * `input` - \n\n  * `load` - \n\n  * `plugin` {`MbPlugin`} - Plugin to handle serialization and parsing of the input. openEHR and FHIR Plugins are built-in.\n\n  * `hermes` {`AxiosInstance`} - Hermes instance to communicate with for SNOMED CT search elements.\n\n  * `mbElements` - The child elements are loaded\n\n  * `export` - \n\n  * `submit` - \n\n  * `submitButton` - \n\n  * `data` {`Data`} - ",
      "attributes": [
        {
          "name": "ctx",
          "description": "`ctx` - Context object that is set before submitting form. Automatic inferences are made where possible.\n\nProperty: ctx"
        },
        {
          "name": "overwritectx",
          "description": "`overwritectx` {`boolean`} - Context will not be automatically inferd. What you pass in will be directly reflected.\n\nProperty: overwritectx\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "plugin",
          "description": "`plugin` {`MbPlugin`} - Plugin to handle serialization and parsing of the input. openEHR and FHIR Plugins are built-in.\n\nProperty: plugin\n\nDefault: [object Object]"
        },
        {
          "name": "hermes",
          "description": "`hermes` {`AxiosInstance`} - Hermes instance to communicate with for SNOMED CT search elements.\n\nProperty: hermes"
        },
        {
          "name": "onmb-input",
          "description": "`mb-input` {} - When contents of the form change. The result must be obtained using `e=>e.target.data`."
        },
        {
          "name": "onmb-load",
          "description": "`mb-load` {} - Triggered when the form first loads."
        },
        {
          "name": "onmb-submit",
          "description": "`mb-submit` {} - Triggered with all the serialized data in the detail of the Event."
        }
      ]
    },
    {
      "name": "mb-quantity",
      "description": "Events:\n\n  * `mb-input` {} - Dispatched when the input changes\n\n  * `mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source\n\n  * `mb-connect` {} - Dispatched when the component connects\n\n  * `mb-disconnect` {} - Dispatched when the component disconnects\n\nAttributes:\n\n  * `default` {`string`} - The default unit to choose. Must be the `value` of a child mb-option element\n\n  * `hideunit` {`boolean`} - Hides the units. Make sure to set a default unit, or set it programatically.\n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string | undefined`} - Optional label for the element\n\n  * `data` {`Quantity | undefined`} - Data of the element. Setting this will emit an input event automatically.\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperties:\n\n  * `default` {`string`} - The default unit to choose. Must be the `value` of a child mb-option element\n\n  * `hideunit` {`boolean`} - Hides the units. Make sure to set a default unit, or set it programatically.\n\n  * `units` {`MbUnit[]`} - \n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string | undefined`} - Optional label for the element\n\n  * `data` {`Quantity | undefined`} - Data of the element. Setting this will emit an input event automatically.\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\n  * `_mbInput` - Event Emitter for mb-input\n\n  * `_mbDependency` - \n\n  * `_mbConnect` - \n\n  * `_mbDisconnect` - ",
      "attributes": [
        {
          "name": "default",
          "description": "`default` {`string`} - The default unit to choose. Must be the `value` of a child mb-option element\n\nProperty: default"
        },
        {
          "name": "hideunit",
          "description": "`hideunit` {`boolean`} - Hides the units. Make sure to set a default unit, or set it programatically.\n\nProperty: hideunit\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "`path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\nProperty: path"
        },
        {
          "name": "label",
          "description": "`label` {`string | undefined`} - Optional label for the element\n\nProperty: label",
          "values": []
        },
        {
          "name": "data",
          "description": "`data` {`Quantity | undefined`} - Data of the element. Setting this will emit an input event automatically.\n\nProperty: data",
          "values": []
        },
        {
          "name": "type",
          "description": "`type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperty: type",
          "values": []
        },
        {
          "name": "onmb-input",
          "description": "`mb-input` {} - Dispatched when the input changes"
        },
        {
          "name": "onmb-dependency",
          "description": "`mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source"
        },
        {
          "name": "onmb-connect",
          "description": "`mb-connect` {} - Dispatched when the component connects"
        },
        {
          "name": "onmb-disconnect",
          "description": "`mb-disconnect` {} - Dispatched when the component disconnects"
        }
      ]
    },
    {
      "name": "mb-unit",
      "description": "Attributes:\n\n  * `unit` {`string`} - \n\n  * `label` {`string`} - \n\nProperties:\n\n  * `unit` {`string`} - \n\n  * `label` {`string`} - ",
      "attributes": [
        {
          "name": "unit",
          "description": "`unit` {`string`} - \n\nProperty: unit"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - \n\nProperty: label"
        }
      ]
    },
    {
      "name": "mb-submit",
      "description": "Attributes:\n\n  * `type` {`\"primary\" | \"success\" | \"info\" | \"warning\" | \"danger\" | \"text\" | \"default\"`} - \n\n  * `loading` {`boolean`} - \n\nProperties:\n\n  * `submit` - \n\n  * `type` {`\"primary\" | \"success\" | \"info\" | \"warning\" | \"danger\" | \"text\" | \"default\"`} - \n\n  * `loading` {`boolean`} - ",
      "attributes": [
        {
          "name": "type",
          "description": "`type` {`\"primary\" | \"success\" | \"info\" | \"warning\" | \"danger\" | \"text\" | \"default\"`} - \n\nProperty: type\n\nDefault: default",
          "values": [
            {
              "name": "primary"
            },
            {
              "name": "success"
            },
            {
              "name": "info"
            },
            {
              "name": "warning"
            },
            {
              "name": "danger"
            },
            {
              "name": "text"
            },
            {
              "name": "default"
            }
          ]
        },
        {
          "name": "loading",
          "description": "`loading` {`boolean`} - \n\nProperty: loading\n\nDefault: false",
          "valueSet": "v"
        }
      ]
    },
    {
      "name": "mb-input",
      "description": "An input element to capture text\n\nEvents:\n\n  * `mb-input` {} - Dispatched when the input changes\n\n  * `mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source\n\n  * `mb-connect` {} - Dispatched when the component connects\n\n  * `mb-disconnect` {} - Dispatched when the component disconnects\n\nAttributes:\n\n  * `textarea` {`boolean`} - \n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string`} - Optional label for the element\n\n  * `data` {`string`} - Data of the element. Setting this will emit an input event automatically.\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperties:\n\n  * `textarea` {`boolean`} - \n\n  * `path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\n  * `label` {`string`} - Optional label for the element\n\n  * `data` {`string`} - Data of the element. Setting this will emit an input event automatically.\n\n  * `type` {`string | undefined`} - An internal representation of type to handle serializing\n\n  * `_mbInput` - Event Emitter for mb-input\n\n  * `_mbDependency` - \n\n  * `_mbConnect` - \n\n  * `_mbDisconnect` - ",
      "attributes": [
        {
          "name": "textarea",
          "description": "`textarea` {`boolean`} - \n\nProperty: textarea\n\nDefault: false",
          "valueSet": "v"
        },
        {
          "name": "path",
          "description": "`path` {`string`} - Path of the data element. Use the VSCode extension to get the appropriate paths\n\nProperty: path"
        },
        {
          "name": "label",
          "description": "`label` {`string`} - Optional label for the element\n\nProperty: label\n\nDefault: "
        },
        {
          "name": "data",
          "description": "`data` {`string`} - Data of the element. Setting this will emit an input event automatically.\n\nProperty: data"
        },
        {
          "name": "type",
          "description": "`type` {`string | undefined`} - An internal representation of type to handle serializing\n\nProperty: type",
          "values": []
        },
        {
          "name": "onmb-input",
          "description": "`mb-input` {} - Dispatched when the input changes"
        },
        {
          "name": "onmb-dependency",
          "description": "`mb-dependency` {} - Dispatched if dependencies are needed from an external or parent source"
        },
        {
          "name": "onmb-connect",
          "description": "`mb-connect` {} - Dispatched when the component connects"
        },
        {
          "name": "onmb-disconnect",
          "description": "`mb-disconnect` {} - Dispatched when the component disconnects"
        }
      ]
    }
  ],
  "globalAttributes": [],
  "valueSets": []
}